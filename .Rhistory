# Display the last few rows of the fang_data dataset to inspect how the data ends.
tail(fang_data)
# Check the size of the dataset
cat("The fang_data object occupies approximately",
format(object.size(fang_data), units = "MB"), "of memory.\n")
# Calculate the number of rows in the fang_data dataset
num_lines_fang_data <- nrow(fang_data)
# Calculate the number of columns  in the fang_data dataset.
num_columns_fang_data <- ncol(fang_data)
cat("The fang_et_al_genotypes dataset contains", num_lines_fang_data, "rows (samples) and",
num_columns_fang_data, "columns .\n")
# Display the dimensions of the dataset
#dim(fang_data)
cat("The dimensions of the dataset are:", dim(fang_data)[1], "rows and", dim(fang_data)[2], "columns.\n")
num_missing_fang <- sum(fang_data == "?/?", na.rm = TRUE)
cat("The sum of the missing values is:", num_missing_fang)
# Count the number of missing values represented as "?/?" in the dataset
num_missing_fang <- sum(fang_data == "?/?", na.rm = TRUE)
# Print the total number of missing values
cat("The sum of the missing values in the fang_data:", num_missing_fang)
# View the dataset (This will open it in RStudio's Data Viewer)
cat("Opening the fang_data dataset in the Viewer...\n")
View(fang_data)
# Display the structure of the dataset
cat("Here is the structure of the fang_data dataset:\n")
#str(fang_data)
# Display the first few rows of the snp_data dataset to get an overview of the data.
head(snp_data)
# Display the last few rows of the snp_data dataset to inspect how the data ends.
tail(snp_data)
# Check the size of the dataset
cat("The snp_data object occupies approximately",
format(object.size(snp_data), units = "MB"), "of memory.\n")
# Calculate the number of rows in the snp_data dataset
num_lines_snp_data <- nrow(snp_data)
# Calculate the number of columns in the snp_data dataset.
num_columns_snp_data <- ncol(snp_data)
cat("The snp_position dataset contains", num_lines_snp_data, "rows (SNP positions) and",
num_columns_snp_data, "columns.\n")
# Display the dimensions of the dataset
cat("The dimensions of the dataset are:", dim(snp_data)[1], "rows and", dim(snp_data)[2], "columns.\n")
# Count the number of missing values represented as "?/?" in the dataset
num_missing_snp <- sum(snp_data == "?/?", na.rm = TRUE)
# Print the total number of missing values
cat("The sum of the missing values in snp_data is:", num_missing_snp)
# View the snp_position dataset (This will open it in RStudio's Data Viewer)
cat("Opening the snp_position in the Viewer...\n")
View(snp_data)
# Display the structure of the dataset
cat("Here is the structure of the snp_position:\n")
str(snp_data)
# Transpose the fang_data dataset to switch rows and columns
fang_transposed <- as.data.frame(t(fang_data), stringsAsFactors = FALSE)
# View the transposed data (optional, for checking)
view(fang_transposed)
# Convert the third row into column names (assuming row 3 contains SNP names)
colnames(fang_transposed) <- fang_transposed[3, ]
# Add the original row names as a new first column to preserve them
fang_transposed <- cbind(Original_Colnames = rownames(fang_transposed), fang_transposed)
# Remove the first 3 rows as they are not needed after setting column names
fang_transposed <- fang_transposed[-c(1:3), ]
# Rename the first column to "SNP_ID" for clarity
colnames(fang_transposed)[1] <- "SNP_ID"
# View the cleaned transposed data (optional, for checking)
view(fang_transposed)
# Reset row names to ensure they are sequential and start from 1
rownames(fang_transposed) <- NULL
# Select relevant columns (SNP_ID, Chromosome, Position) from snp_data
snp_info <- select(snp_data, SNP_ID, Chromosome, Position)
# Ensure unique column names in fang_transposed to avoid duplication issues
colnames(fang_transposed) <- make.unique(colnames(fang_transposed))
# Perform a left join to merge snp_info with fang_transposed based on SNP_ID
df_joined <- left_join(snp_info, fang_transposed, by = "SNP_ID")
# View the resulting dataframe in RStudio
view(df_joined)
# Save the joined dataset as a tab-separated text file
write.table(df_joined, "joined_fang_snp_data.txt", sep = "\t", row.names = FALSE, quote = FALSE)
# Extract relevant columns for maize, including SNP_ID, Chromosome, Position, and columns starting with ZMMIL, ZMMLR, or ZMMMR
df_maize <- df_joined %>% select(SNP_ID, Chromosome = Chromosome, Position = Position,
starts_with("ZMMIL"), starts_with("ZMMLR"), starts_with("ZMMMR"))
# View the maize-specific dataset in RStudio
view(df_maize)
write.table(df_joined, "Maize/maize_data.txt", sep = "\t", row.names = FALSE, quote = FALSE)
# Sort by SNP position in ascending order
df_maize_sorted_incre <- df_maize %>% arrange(Position)
# Save the sorted maize dataset as a tab-separated text file
write.table(df_maize_sorted_incre, "Maize/maize_sorted_incre_data.txt", sep = "\t", row.names = FALSE, quote = FALSE)
# Extract rows with 'multiple' in the Chromosome column
df_multiple <- df_maize_sorted_incre %>% filter(Chromosome == "multiple")
# Extract rows with 'unknown' in the Chromosome column
df_unknown <- df_maize_sorted_incre %>% filter(Chromosome == "unknown")
# Save the 'multiple' chromosome data to a tab-separated text file
write.table(df_multiple, "Maize/maize_chromo_multiple.txt",sep = "\t", row.names = FALSE, quote = FALS)
# Extract rows with 'multiple' in the Chromosome column
df_multiple <- df_maize_sorted_incre %>% filter(Chromosome == "multiple")
# Extract rows with 'unknown' in the Chromosome column
df_unknown <- df_maize_sorted_incre %>% filter(Chromosome == "unknown")
# Save the 'multiple' chromosome data to a tab-separated text file
write.table(df_multiple, "Maize/maize_chromo_multiple.txt",sep = "\t", row.names = FALSE, quote = FALS)
# Extract rows with 'multiple' in the Chromosome column
df_multiple <- df_maize_sorted_incre %>% filter(Chromosome == "multiple")
# Extract rows with 'unknown' in the Chromosome column
df_unknown <- df_maize_sorted_incre %>% filter(Chromosome == "unknown")
# Save the 'multiple' chromosome data to a tab-separated text file
write.table(df_multiple, "Maize/maize_chromo_multiple.txt",sep = "\t", row.names = FALSE, quote = FALSE)
# Save the 'unknown' chromosome data to a tab-separated text file
write.table (df_unknown, "Maize/maize_chromo_unknown.txt",sep = "\t", row.names = FALSE, quote = FALSE)
# Define the directory path for saving the output file
file_dir = "~/ISU/SPRING 2025/BCB4560/R_Assignment_Final/Teosinte/"
# Extract relevant columns for Teosinte from the joined dataframe
# Selecting SNP_ID, Chromosome, Position, and columns that start with "ZMPBA", "ZMPIL", or "ZMPJA"
df_teosinte <- df_joined %>% select(SNP_ID, Chromosome = Chromosome, Position = Position,
starts_with("ZMPBA"), starts_with("ZMPIL"), starts_with("ZMPJA"))
# View the extracted dataframe in RStudio
view(df_teosinte)
# Save the extracted Teosinte data to a text file with tab-separated values
write.table(df_teosinte, paste0(file_dir, "data_teosinte.txt"), sep = "\t", row.names = FALSE, quote = FALSE)
# Sort the Teosinte dataframe by SNP position in increasing order
df_teosinte_sorted_incre <- df_teosinte %>% arrange(Position)
# View the sorted dataframe in RStudio
view(df_teosinte_sorted_incre)
# Save the sorted Teosinte data to a text file with tab-separated values
write.table(df_teosinte_sorted_incre, paste0(file_dir, "data_teosinte_sorted_incre.txt"),
sep = "\t", row.names = FALSE, quote = FALSE)
# Extract rows with 'multiple' or 'unknown' in Chromosome column
df_multiple <- df_teosinte_sorted_incre %>% filter(Chromosome == "multiple")
df_unknown <- df_teosinte_sorted_incre %>% filter(Chromosome == "unknown")
write.table(df_multiple, paste0(file_dir,"Teosinte_chromo_multiple.txt"), sep = "\t", row.names = FALSE, quote = FALSE)
write.table(df_unknown, paste0(file_dir,"Teosinte_chromo_unknown.txt"), sep = "\t", row.names = FALSE, quote = FALSE)
# Extract rows where the Chromosome column has the value "multiple"
df_multiple <- df_teosinte_sorted_incre %>% filter(Chromosome == "multiple")
# Extract rows where the Chromosome column has the value "unknown"
df_unknown <- df_teosinte_sorted_incre %>% filter(Chromosome == "unknown")
# Save the extracted data for "multiple" chromosomes to a text file with tab-separated values
write.table(df_multiple, paste0(file_dir, "Teosinte_chromo_multiple.txt"),
sep = "\t", row.names = FALSE, quote = FALSE)
# Save the extracted data for "unknown" chromosomes to a text file with tab-separated values
write.table(df_unknown, paste0(file_dir, "Teosinte_chromo_unknown.txt"),
sep = "\t", row.names = FALSE, quote = FALSE)
# Create separate chromosome files for Teosinte (Increasing SNP Positions)
# Create separate files for each chromosome (1 to 10) in Teosinte dataset, sorted by increasing SNP positions
for (chr_num in 1:10) {
# Filter the dataframe to include only rows where Chromosome matches the current chromosome number
df_chr <- df_teosinte_sorted_incre %>% filter(Chromosome == chr_num)
# Save the filtered data to a text file, named according to the chromosome number
write.table(df_chr, paste0(file_dir, "/Teosinte_Increasing_Chromo/Teosinte_incre_chromo", chr_num, ".txt"),
sep = "\t", row.names = FALSE, quote = FALSE)
}
# Create a copy of the Teosinte dataframe to modify the genotype format
df_teosinte_dash <- df_teosinte
# Replace all occurrences of "?/?" with "-/-" in the dataframe
df_teosinte_dash[df_teosinte_dash == "?/?"] <- "-/-"
# View the modified dataframe in RStudio
view(df_teosinte_dash)
# Save the modified Teosinte data to a text file with tab-separated values
write.table(df_teosinte_dash, paste0(file_dir, "data_teosinte_dash.txt"),
sep = "\t", row.names = FALSE, quote = FALSE)
# Sort the modified dataframe by SNP position in decreasing order
df_teosinte_sorted_decre_dash <- df_teosinte_dash %>% arrange(desc(Position))
# View the sorted dataframe in RStudio
view(df_teosinte_sorted_decre_dash)
# Save the sorted Teosinte data to a text file with tab-separated values
write.table(df_teosinte_sorted_decre_dash, paste0(file_dir, "data_teosinte_sorted_decre_dash.txt"),
sep = "\t", row.names = FALSE, quote = FALSE)
# Create separate chromosome files for Teosinte (Decreasing SNP Positions)
# Create separate files for each chromosome (1 to 10) in the Teosinte dataset, sorted by decreasing SNP positions
for (chr_num in 1:10) {
# Filter the dataframe to include only rows where Chromosome matches the current chromosome number
df_chr <- df_teosinte_sorted_decre_dash %>% filter(Chromosome == chr_num)
# Save the filtered data to a text file, named according to the chromosome number, using tab-separated values
write_tsv(df_chr, paste0(file_dir, "/Teosinte_Decreasing_Chromo/Teosinte_decre_chromo", chr_num, ".txt"))
}
library(ggplot2)
library(dplyr)
library(tidyverse)
library(tidyr)
library(purrr)
# Count the number of SNPs per chromosome for the Teosinte dataset
snp_count_teosinte <- df_teosinte %>%
# Group the data by the Chromosome column
group_by(Chromosome) %>%
# Count the number of SNPs in each chromosome group
summarise(SNP_Count = n()) %>%
# Add a new column to indicate the dataset source as "Teosinte"
mutate(Group = "Teosinte")
# Count the number of SNPs per chromosome for the Teosinte dataset
snp_count_teosinte <- df_teosinte %>%
# Group the data by the Chromosome column
group_by(Chromosome) %>%
# Count the number of SNPs in each chromosome group
summarise(SNP_Count = n()) %>%
# Add a new column to indicate the dataset source as "Teosinte"
mutate(Group = "Teosinte")
# Count the number of SNPs per chromosome for the Teosinte dataset
snp_count_teosinte <- df_teosinte %>%
# Group the data by the Chromosome column
group_by(Chromosome) %>%
# Count the number of SNPs in each chromosome group
summarise(SNP_Count = n()) %>%
# Add a new column to indicate the dataset source as "Teosinte"
mutate(Group = "Teosinte")
# Combine SNP count data from both Maize and Teosinte datasets
snp_counts <- bind_rows(snp_count_maize, snp_count_teosinte)
# Count the number of SNPs per chromosome for the maize dataset
snp_count_maize <- df_maize %>%
# Group the data by the Chromosome column
group_by(Chromosome) %>%
# Count the number of SNPs in each chromosome group
summarise(SNP_Count = n()) %>%
# Add a new column to indicate the dataset source as "Maize"
mutate(Group = "Maize")
# Count the number of SNPs per chromosome for the Teosinte dataset
snp_count_teosinte <- df_teosinte %>%
# Group the data by the Chromosome column
group_by(Chromosome) %>%
# Count the number of SNPs in each chromosome group
summarise(SNP_Count = n()) %>%
# Add a new column to indicate the dataset source as "Teosinte"
mutate(Group = "Teosinte")
# Combine SNP count data from both Maize and Teosinte datasets
snp_counts <- bind_rows(snp_count_maize, snp_count_teosinte)
# Plot SNP count per chromosome for Maize and Teosinte
ggplot(snp_counts, aes(x = Chromosome, y = SNP_Count, fill = Group)) +
# Create a bar plot with "Chromosome" on the x-axis and "SNP_Count" on the y-axis
# The bars are grouped by "Group" (Maize vs. Teosinte)
geom_bar(stat = "identity", position = "dodge") +
# Add labels to the plot
labs(title = "SNP Distribution Across Chromosomes",
x = "Chromosome", y = "Number of SNPs") +
# Set custom colors for the "Maize" and "Teosinte" groups
scale_fill_manual(values = c("Maize" = "blue", "Teosinte" = "green")) +
# Use a clean and simple theme for the plot
theme_classic()
# Function to classify SNPs
classify_snp <- function(genotype) {
switch(genotype,
"?/?" = "Missing",
ifelse(grepl("A/A|C/C|G/G|T/T", genotype), "Homozygous", "Heterozygous"))
}
# Apply classification to maize data
df_maize_long <- df_maize %>%
pivot_longer(cols = -c(SNP_ID, Chromosome, Position),  # Select all except metadata columns
names_to = "Sample", values_to = "Genotype") %>%
mutate(SNP_Type = map_chr(Genotype, classify_snp))
# Faster than sapply
head(df_maize_long)
# Apply classification to teosinte data
df_teosinte_long <- df_teosinte %>%
pivot_longer(cols = -c(SNP_ID, Chromosome, Position),  # Select all except metadata columns
names_to = "Sample", values_to = "Genotype") %>%
mutate(SNP_Type = map_chr(Genotype, classify_snp))
head(df_teosinte_long)
# Combine both datasets
df_combined <- bind_rows(
df_maize_long %>% mutate(Group = "Maize"),
df_teosinte_long %>% mutate(Group = "Teosinte")
)
# Combine the long format data for both maize and teosinte
df_long <- bind_rows(maize_long, teosinte_long)
# Function to classify SNPs
classify_snp <- function(genotype) {
switch(genotype,
"?/?" = "Missing",
ifelse(grepl("A/A|C/C|G/G|T/T", genotype), "Homozygous", "Heterozygous"))
}
# Apply classification to maize data
df_maize_long <- df_maize %>%
pivot_longer(cols = -c(SNP_ID, Chromosome, Position),  # Select all except metadata columns
names_to = "Sample", values_to = "Genotype") %>%
mutate(SNP_Type = map_chr(Genotype, classify_snp))
# Faster than sapply
head(df_maize_long)
# Apply classification to teosinte data
df_teosinte_long <- df_teosinte %>%
pivot_longer(cols = -c(SNP_ID, Chromosome, Position),  # Select all except metadata columns
names_to = "Sample", values_to = "Genotype") %>%
mutate(SNP_Type = map_chr(Genotype, classify_snp))
head(df_teosinte_long)
# Combine both datasets
df_combined <- bind_rows(
df_maize_long %>% mutate(Group = "Maize"),
df_teosinte_long %>% mutate(Group = "Teosinte")
)
# Combine the long format data for both maize and teosinte
df_long <- bind_rows(maize_long, teosinte_long)
# Combine the long format data for both maize and teosinte
df_long <- bind_rows(maize_long, teosinte_long)
# Function to classify SNPs
classify_snp <- function(genotype) {
switch(genotype,
"?/?" = "Missing",
ifelse(grepl("A/A|C/C|G/G|T/T", genotype), "Homozygous", "Heterozygous"))
}
# Apply classification to maize data
df_maize_long <- df_maize %>%
pivot_longer(cols = -c(SNP_ID, Chromosome, Position),  # Select all except metadata columns
names_to = "Sample", values_to = "Genotype") %>%
mutate(SNP_Type = map_chr(Genotype, classify_snp))
# Faster than sapply
head(df_maize_long)
# Apply classification to teosinte data
df_teosinte_long <- df_teosinte %>%
pivot_longer(cols = -c(SNP_ID, Chromosome, Position),  # Select all except metadata columns
names_to = "Sample", values_to = "Genotype") %>%
mutate(SNP_Type = map_chr(Genotype, classify_snp))
head(df_teosinte_long)
# Combine both datasets
df_combined <- bind_rows(
df_maize_long %>% mutate(Group = "Maize"),
df_teosinte_long %>% mutate(Group = "Teosinte")
)
# Combine the long format data for both maize and teosinte
df_long <- bind_rows(maize_long, teosinte_long)
# Function to classify SNPs
classify_snp <- function(genotype) {
switch(genotype,
"?/?" = "Missing",
ifelse(grepl("A/A|C/C|G/G|T/T", genotype), "Homozygous", "Heterozygous"))
}
# Apply classification to maize data
df_maize_long <- df_maize %>%
pivot_longer(cols = -c(SNP_ID, Chromosome, Position),  # Select all except metadata columns
names_to = "Sample", values_to = "Genotype") %>%
mutate(SNP_Type = map_chr(Genotype, classify_snp))
# Faster than sapply
head(df_maize_long)
# Apply classification to teosinte data
df_teosinte_long <- df_teosinte %>%
pivot_longer(cols = -c(SNP_ID, Chromosome, Position),  # Select all except metadata columns
names_to = "Sample", values_to = "Genotype") %>%
mutate(SNP_Type = map_chr(Genotype, classify_snp))
head(df_teosinte_long)
# Combine both datasets
df_combined <- bind_rows(
df_maize_long %>% mutate(Group = "Maize"),
df_teosinte_long %>% mutate(Group = "Teosinte")
)
# Combine the long format data for both maize and teosinte
df_long <- bind_rows(maize_long, teosinte_long)
# Function to classify SNPs
classify_snp <- function(genotype) {
switch(genotype,
"?/?" = "Missing",
ifelse(grepl("A/A|C/C|G/G|T/T", genotype), "Homozygous", "Heterozygous"))
}
# Apply classification to maize data
df_maize_long <- df_maize %>%
pivot_longer(cols = -c(SNP_ID, Chromosome, Position),  # Select all except metadata columns
names_to = "Sample", values_to = "Genotype") %>%
mutate(SNP_Type = map_chr(Genotype, classify_snp))
# Faster than sapply
head(df_maize_long)
# Apply classification to teosinte data
df_teosinte_long <- df_teosinte %>%
pivot_longer(cols = -c(SNP_ID, Chromosome, Position),  # Select all except metadata columns
names_to = "Sample", values_to = "Genotype") %>%
mutate(SNP_Type = map_chr(Genotype, classify_snp))
head(df_teosinte_long)
# Combine both datasets
df_combined <- bind_rows(
df_maize_long %>% mutate(Group = "Maize"),
df_teosinte_long %>% mutate(Group = "Teosinte")
)
# Combine the long format data for both maize and teosinte
df_long <- bind_rows(df_maize_long, teosinte_long)
# Function to classify SNPs
classify_snp <- function(genotype) {
switch(genotype,
"?/?" = "Missing",
ifelse(grepl("A/A|C/C|G/G|T/T", genotype), "Homozygous", "Heterozygous"))
}
# Apply classification to maize data
df_maize_long <- df_maize %>%
pivot_longer(cols = -c(SNP_ID, Chromosome, Position),  # Select all except metadata columns
names_to = "Sample", values_to = "Genotype") %>%
mutate(SNP_Type = map_chr(Genotype, classify_snp))
# Faster than sapply
head(df_maize_long)
# Apply classification to teosinte data
df_teosinte_long <- df_teosinte %>%
pivot_longer(cols = -c(SNP_ID, Chromosome, Position),  # Select all except metadata columns
names_to = "Sample", values_to = "Genotype") %>%
mutate(SNP_Type = map_chr(Genotype, classify_snp))
head(df_teosinte_long)
# Combine both datasets
df_combined <- bind_rows(
df_maize_long %>% mutate(Group = "Maize"),
df_teosinte_long %>% mutate(Group = "Teosinte")
)
# Combine the long format data for both maize and teosinte
df_long <- bind_rows(df_maize_long, df_teosinte_long)
# Summarize SNP types by group (Maize or Teosinte)
df_snp_summary <- df_combined %>%
# Group the data by "Group" (Maize or Teosinte) and "SNP_Type" (Homozygous, Heterozygous, Missing)
group_by(Group, SNP_Type) %>%
# Count the number of occurrences for each SNP type in each group
summarise(Count = n(), .groups = "drop") %>%
# Calculate the proportion of each SNP type within each group
mutate(Proportion = Count / sum(Count))
# View the summarized results (SNP counts and proportions)
print(df_snp_summary)
# Combine the long format data for both maize and teosinte
df_long <- bind_rows(maize_long, teosinte_long)
# Summarize SNP types by group (Maize or Teosinte)
df_snp_summary <- df_combined %>%
# Group the data by "Group" (Maize or Teosinte) and "SNP_Type" (Homozygous, Heterozygous, Missing)
group_by(Group, SNP_Type) %>%
# Count the number of occurrences for each SNP type in each group
summarise(Count = n(), .groups = "drop") %>%
# Calculate the proportion of each SNP type within each group
mutate(Proportion = Count / sum(Count))
# View the summarized results (SNP counts and proportions)
print(df_snp_summary)
ggplot(df_combined, aes(x = Chromosome, fill = SNP_Type)) +
geom_bar(position = "fill") +  # "fill" makes proportions instead of counts
facet_wrap(~ Group) +  # Separate plots for Maize & Teosinte
labs(title = "Zygosity Distribution Across Chromosomes",
x = "Chromosome", y = "Proportion",
fill = "SNP Type") +
theme_classic()
ggplot(df_combined, aes(x = Chromosome, fill = SNP_Type)) +
geom_bar(position = "fill") +  # "fill" makes proportions instead of counts
facet_wrap(~ Group) +  # Separate plots for Maize & Teosinte
labs(title = "Zygosity Distribution Across Chromosomes",
x = "Chromosome", y = "Proportion",
fill = "SNP Type") +
theme_classic()
ggplot(df_combined, aes(x = Chromosome, fill = SNP_Type)) +
geom_bar(position = "fill") +  # "fill" makes proportions instead of counts
facet_wrap(~ Group) +  # Separate plots for Maize & Teosinte
labs(title = "Zygosity Distribution Across Chromosomes",
x = "Chromosome", y = "Proportion",
fill = "SNP Type") +
theme_classic()
ggplot(df_combined, aes(x = Chromosome, fill = SNP_Type)) +
geom_bar(position = "fill") +  # "fill" makes proportions instead of counts
facet_wrap(~ Group) +  # Separate plots for Maize & Teosinte
labs(title = "Zygosity Distribution Across Chromosomes",
x = "Chromosome", y = "Proportion",
fill = "SNP Type") +
theme_classic()
#Bar Plot – SNP Distribution by Group
ggplot(df_snp_summary, aes(x = Group, y = Proportion, fill = SNP_Type)) +
geom_bar(stat = "identity", position = "fill") +  # Stacked proportional bar chart
labs(title = "SNP Type Proportions in Maize vs Teosinte",
x = "Group", y = "Proportion") +
scale_y_continuous(labels = scales::percent) +
theme_classic()
#Stacked Bar Plot – Absolute SNP Counts
ggplot(df_snp_summary, aes(x = Group, y = Count, fill = SNP_Type)) +
geom_bar(stat = "identity", position = "stack") +  # Stacked bar chart
labs(title = "Total SNP Counts in Maize vs Teosinte",
x = "Group", y = "SNP Count") +
theme_classic()
#Bar Plot – SNP Distribution by Group
ggplot(df_snp_summary, aes(x = Group, y = Proportion, fill = SNP_Type)) +
geom_bar(stat = "identity", position = "fill") +  # Stacked proportional bar chart
labs(title = "SNP Type Proportions in Maize vs Teosinte",
x = "Group", y = "Proportion") +
scale_y_continuous(labels = scales::percent) +
theme_classic()
#Stacked Bar Plot – Absolute SNP Counts
ggplot(df_snp_summary, aes(x = Group, y = Count, fill = SNP_Type)) +
geom_bar(stat = "identity", position = "stack") +  # Stacked bar chart
labs(title = "Total SNP Counts in Maize vs Teosinte",
x = "Group", y = "SNP Count") +
theme_classic()
# Box plot of SNP types per sample
# Now the boxplot will work
ggplot(df_combined, aes(x = SNP_Type, y = Count, fill = Group)) +
geom_boxplot() +
labs(title = "SNP Count Distribution in Maize vs Teosinte",
x = "SNP Type", y = "SNP Count") +
theme_classic()
# Bar Plot – SNP Distribution per Sample
ggplot(df_combined, aes(x = SNP_Type, y = ..count.., fill = Group)) +
geom_bar(position = "dodge") +
labs(title = "SNP Type Distribution in Maize vs Teosinte",
x = "SNP Type", y = "Count") +
theme_classic()
#Increasing SNP Position (Maize)
# Create separate chromosome files for chromosomes 1 to 10
for (chr_num in 1:10) {
# Filter rows for each chromosome number
df_chr <- df_maize_sorted_incre %>% filter(chromosome == chr_num)
# Save the filtered chromosome data to a tab-separated text file without row names or quotes
write.table(df_chr, paste0("Maize/Maize_Increasing_Chromo/Maize_incre_chromo", chr_num, ".txt"), sep = "\t", row.names = FALSE, quote = FALSE)
}
#Increasing SNP Position (Maize)
# Create separate chromosome files for chromosomes 1 to 10
for (chr_num in 1:10) {
# Filter rows for each chromosome number
df_chr <- df_maize_sorted_incre %>% dplyr::filter(chromosome == chr_num)
# Save the filtered chromosome data to a tab-separated text file without row names or quotes
write.table(df_chr, paste0("Maize/Maize_Increasing_Chromo/Maize_incre_chromo", chr_num, ".txt"), sep = "\t", row.names = FALSE, quote = FALSE)
}
#Increasing SNP Position (Maize)
# Create separate chromosome files for chromosomes 1 to 10
for (chr_num in 1:10) {
# Filter rows for each chromosome number
df_chr <- df_maize_sorted_incre %>% dplyr::filter(Chromosome == chr_num)
# Save the filtered chromosome data to a tab-separated text file without row names or quotes
write.table(df_chr, paste0("Maize/Maize_Increasing_Chromo/Maize_incre_chromo", chr_num, ".txt"), sep = "\t", row.names = FALSE, quote = FALSE)
}
#Increasing SNP Position (Maize)
# Create separate chromosome files for chromosomes 1 to 10
for (chr_num in 1:10) {
# Filter rows for each chromosome number
df_chr <- df_maize_sorted_incre %>% filter(Chromosome == chr_num)
# Save the filtered chromosome data to a tab-separated text file without row names or quotes
write.table(df_chr, paste0("Maize/Maize_Increasing_Chromo/Maize_incre_chromo", chr_num, ".txt"), sep = "\t", row.names = FALSE, quote = FALSE)
}
